@page "/campaingslist"

@inject AppState AppState
@inject NavigationManager NavigationManager
@inject MudBlazor.IDialogService DialogService
@using GloomhavenCompanion.Application.ViewModels
@using MudBlazor

<PageTitle>Liste des équipes</PageTitle>

@if (AppState.Campaigns == null || AppState.Campaigns.Count == 0)
{
  <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
    <MudItem Style="margin-top: 20px; margin-left:20px">
      <MudText Align="Align.Center">Aucun groupe de héros n'a encore répondu à l'appel…</MudText>
      <MudButton Class="my-2" Variant="Variant.Filled" Size="Size.Large" OnClick="CreateNewCampaignNavigate">Soyez les premiers!</MudButton>
    </MudItem>
  </MudGrid>
}
else
{
  <MudTable Items="AppState.Campaigns" Hover="true" Striped="true" Bordered="true" Class="mt-4 ml-4">
    <HeaderContent>
      <MudTh>Nom de la compagnie</MudTh>
      <MudTh>Aventuriers</MudTh>
      <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd>@context.CompanyName</MudTd>
      <MudTd>
        @if (context.Players != null && context.Players.Any())
        {
          <MudTable Items="context.Players" Dense="true" Striped="true" Bordered="true">
            <HeaderContent>
              <MudTh>Nom</MudTh>
              <MudTh>XP</MudTh>
              <MudTh>PO</MudTh>
              <MudTh>HP</MudTh>
            </HeaderContent>
            <RowTemplate Context="player">
              <MudTd>@player.Name</MudTd>
              <MudTd>@player.Xp</MudTd>
              <MudTd>@player.Coins</MudTd>
              <MudTd>@player.HealthPointsMax</MudTd>
            </RowTemplate>
          </MudTable>
        }
        else
        {
          <MudText>Pas de joueurs</MudText>
        }
      </MudTd>
      <MudTd>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="() => OpenEditDialog(context)">Éditer</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="() => SetCurrentTeamAndNavigate(context)">Jouer</MudButton>
      </MudTd>
    </RowTemplate>
  </MudTable>
}

@code {
  protected override void OnInitialized()
  {
    AppState.OnChange += StateHasChanged;
  }

  public void Dispose()
  {
    AppState.OnChange -= StateHasChanged; // Désabonner pour éviter les fuites de mémoire
  }

  protected override async Task OnInitializedAsync()
  {
    await AppState.LoadCampaignsAsync(); // Charger les campagnes depuis la base de données
  }

  private void RefreshTeamsList()
  {
    StateHasChanged();
  }

  private void SetCurrentTeamAndNavigate(CampaignViewModel chosenCampaign)
  {
    AppState.ResumeGame(chosenCampaign);
    NavigationManager.NavigateTo("/scenarios");
  }

  private void CreateNewCampaignNavigate()
  {
    NavigationManager.NavigateTo("/create-campaign");
  }

  private async void OpenEditDialog(CampaignViewModel campaign)
  {
    var parameters = new DialogParameters { ["Campaign"] = campaign };
    var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Small, FullScreen = true, FullWidth = true };
    var dialog = DialogService.Show<EditCampaignDialog>("Éditer la compagnie", parameters, options);
    var result = await dialog.Result;

    if (!result.Canceled)
    {
      // Suppose que l'équipe a été mise à jour dans le dialog
      await AppState.LoadCampaignsAsync();  // Recharger les campagnes après modification
      StateHasChanged();
    }
  }
}
