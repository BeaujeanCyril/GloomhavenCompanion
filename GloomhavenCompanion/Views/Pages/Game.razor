@page "/game"
@rendermode InteractiveServer
@inject AppState AppState
@using BlazorAnimation

<PageTitle>Jeu - Scénario @(AppState.CurrentScenario?.Name ?? "Scénario non chargé")</PageTitle>

<div class="bg-gray-800 p-2 flex flex-col min-h-screen">
  <!-- En-tête avec image, round, et éléments -->
  <div class="flex bg-gradient-to-r from-slate-700 rounded-lg h-[120px]">
    <!-- Image -->
    <div class="flex pl-2 items-center bg-gradient-to-r from-slate-700 rounded-lg w-1/6">
      <button class="py-2 px-4 rounded-lg text-lg" @onclick="TogglePopup">
        <img src="@AppState.CurrentScenario.ImagePath" alt="Description de l'image" class="max-w-[120px] h-auto" />
      </button>
    </div>

    <!-- Round Component -->
    <div class="flex items-center bg-gradient-to-r from-slate-700 rounded-lg w-1/6">
      <div class="bg-gray-600 rounded-lg">
        <RoundComponent Round="@AppState.CurrentGame.CurrentRound()" OnNextRound="NextRound" />
      </div>
    </div>

    <!-- ElementComponent -->
    <div class="flex items-center bg-gradient-to-r from-slate-700 rounded-lg w-4/6">
      <div class="bg-gray-600 rounded-lg">
        <ElementComponent OnUseElement="@((id) => UseElement(id))" OnSetElementStrong="@((id) => SetElementStrong(id))" />
      </div>
    </div>
  </div>
@if (showTimerPopup)
{
    <Animation Effect="@Effect.Flash" Delay="@Delay.FiveSeconds">
        <div class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div class="bg-gray-800 p-6 rounded-lg max-w-lg">
                <div class="text-white">
                    <h3 class="text-xl font-bold mb-4">Temps écoulé</h3>
                    <p>Le délai de 5 minutes pour ce round est terminé.</p>
                </div>
                <button class="bg-red-500 text-white py-2 px-4 rounded-lg mt-4" @onclick="CloseTimerPopup">Fermer</button>
            </div>
        </div>
    </Animation>
}

  <!-- Popover pour afficher les rounds -->
  @if (showPopup)
  {
    <div class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div class="bg-gray-800 p-6 rounded-lg max-w-lg">
        <div class="text-white">
          <h3 class="text-xl font-bold mb-4">Rounds</h3>
          <div>
            @foreach (var round in AppState.CurrentGame.Rounds)
            {
              <div class="mb-2">
                Round @round.RoundNumber: @round.DateTime
              </div>
            }
          </div>
        </div>
        <button class="bg-red-500 text-white py-2 px-4 rounded-lg mt-4" @onclick="TogglePopup">Close</button>
      </div>
    </div>
  }

  <!-- Section avec les decks et joueurs -->
  <div class="pt-2 flex flex-wrap gap-4 bg-gray-800">
    <!-- Decks -->
    <div class="w-full md:w-1/3 lg:w-full">
      <div class="p-4 bg-gradient-to-r from-slate-700 rounded-lg">
        <div class="flex gap-4">
              <div class="flex-1 min-w-[180px] mb-4">
                <DeckComponent DeckName=@AppState.CurrentGame.MonsterDeck.Name />
              </div>
        </div>
      </div>
    </div>
  </div>

  <div class="pt-2 flex flex-wrap gap-4 bg-gray-800">
    <!-- Players -->
    @if (AppState.CurrentCampaign != null && AppState.CurrentCampaign.Players.Count > 0)
    {
      <div class="w-full p-4 bg-gradient-to-r from-slate-700 rounded-lg">
        <div class="flex flex-wrap gap-4">
          @foreach (var player in AppState.CurrentGame.Players)
          {
            <div class="flex-1 min-w-[180px] max-w-[calc(25%_-_16px)] mb-4">
              <PlayerComponent Player=@player />
            </div>
          }
        </div>
      </div>
    }
  </div>
</div>