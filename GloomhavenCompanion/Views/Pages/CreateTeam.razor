@page "/create-team"
@inject AppState AppState
@using System.ComponentModel.DataAnnotations
@using GloomhavenCompanion.ViewModels
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<h3>Créer une Équipe</h3>

<EditForm Model="teamModel" OnValidSubmit="HandleFormSubmit">
  <DataAnnotationsValidator />

  <!-- Nom de la compagnie -->
  <div class="mb-3">
    <MudTextField @bind-Value="teamModel.CompanyName"
                  Label="Nom de la compagnie"
                  Variant="Variant.Outlined" />
    <ValidationMessage For="@(() => teamModel.CompanyName)" />
  </div>


  <!-- Noms des joueurs -->
  <div class="mb-3">
    <MudTextField @bind-Value="playerModel.PlayerNames[0]"
                  Label="Nom du joueur 1"
                  Variant="Variant.Outlined"
             />
    <ValidationMessage For="@(() => playerModel.PlayerNames[0])" />
  </div>

  <div class="mb-3">
    <MudTextField @bind-Value="playerModel.PlayerNames[1]"
                  Label="Nom du joueur 2"
                  Variant="Variant.Outlined"
      />
    <ValidationMessage For="@(() => playerModel.PlayerNames[1])" />
  </div>

  <div class="mb-3">
    <MudTextField @bind-Value="playerModel.PlayerNames[2]"
                  Label="Nom du joueur 3"
                  Variant="Variant.Outlined"
                />
    <ValidationMessage For="@(() => playerModel.PlayerNames[2])" />
  </div>

  <div class="mb-3">
    <MudTextField @bind-Value="playerModel.PlayerNames[3]"
                  Label="Nom du joueur 4"
                  Variant="Variant.Outlined"
                  />
    <ValidationMessage For="@(() => playerModel.PlayerNames[3])" />
  </div>

  <button type="submit" class="btn btn-primary">Créer</button>
</EditForm>

@code {
  private TeamModelValidator teamModel = new TeamModelValidator();
  private PlayerModelValidator playerModel = new PlayerModelValidator();

  private async void HandleFormSubmit()
  {
    // Créer une liste de joueurs en excluant les champs vides
    var players = new List<PlayerViewModel>();

    foreach (var playerName in playerModel.PlayerNames.Where(name => !string.IsNullOrWhiteSpace(name)))
    {
      players.Add(new PlayerViewModel
        {
          Name = playerName,
          Deck = new DeckViewModel { Name = $"Deck de {playerName}" }
        });
    }

    // Si aucun joueur n'est renseigné, afficher un message d'erreur
    if (players.Count == 0)
    {
      Snackbar.Add("Veuillez renseigner au moins un joueur.", Severity.Warning);
      return;
    }

    // Créer l'équipe avec les joueurs valides
    var newTeam = new TeamViewModel
      {
        CompanyName = teamModel.CompanyName,
        Players = players
      };

    await AppState.AddTeam(newTeam);

    Snackbar.Add($"Équipe ajoutée : {newTeam.CompanyName} avec {newTeam.Players.Count} joueurs", Severity.Success);
    Navigation.NavigateTo("/teamslist");
  }

  public class TeamModelValidator
  {
    [Required(ErrorMessage = "Le nom de la compagnie est requis")]
    public string CompanyName { get; set; }

    [Range(1, 4, ErrorMessage = "Le nombre de joueurs doit être entre 1 et 4")]
    public int PlayerCount { get; set; } = 1;
  }

  public class PlayerModelValidator
  {
    public List<string> PlayerNames { get; set; } = new List<string> { "", "", "", "" }; // 4 champs pour 4 joueurs
  }
}
