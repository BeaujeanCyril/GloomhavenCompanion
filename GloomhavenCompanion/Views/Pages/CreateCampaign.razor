@page "/create-campaign"
@inject AppState AppState
@using System.ComponentModel.DataAnnotations
@using GloomhavenCompanion.ViewModels
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<h3 Style="margin-top: 20px; margin-left:20px">Créer une Équipe</h3>

<EditForm Model="CampaignModel" OnValidSubmit="HandleFormSubmit" Style="margin-top: 20px; margin-left:20px">
  <DataAnnotationsValidator />

  <!-- Nom de la compagnie -->
  <div class="mb-3">
    <MudTextField @bind-Value="CampaignModel.CompanyName"
                  Label="Nom de la compagnie"
                  Variant="Variant.Outlined" />
    <ValidationMessage For="@(() => CampaignModel.CompanyName)" />
  </div>
  <MudGrid>
  <!-- Noms des joueurs -->
  <MudItem>
  <div class="mb-3">
    <MudTextField @bind-Value="playerModel.PlayerNames[0]"
                  Label="Nom du joueur 1"
                  Variant="Variant.Outlined" />
    <MudNumericField @bind-Value="playerModel.HealthPointsMax[0]"
                     Label="HP Max (Joueur 1)"
                     Variant="Variant.Outlined"
                     Min="1" />
    <ValidationMessage For="@(() => playerModel.PlayerNames[0])" />
  </div>
    </MudItem>

      <MudItem>
  <div class="mb-3">
    <MudTextField @bind-Value="playerModel.PlayerNames[1]"
                  Label="Nom du joueur 2"
                  Variant="Variant.Outlined" />
    <MudNumericField @bind-Value="playerModel.HealthPointsMax[1]"
                     Label="HP Max (Joueur 2)"
                     Variant="Variant.Outlined"
                     Min="1" />
    <ValidationMessage For="@(() => playerModel.PlayerNames[1])" />
  </div>
    </MudItem>
    <MudItem>
  <div class="mb-3">
    <MudTextField @bind-Value="playerModel.PlayerNames[2]"
                  Label="Nom du joueur 3"
                  Variant="Variant.Outlined" />
    <MudNumericField @bind-Value="playerModel.HealthPointsMax[2]"
                     Label="HP Max (Joueur 3)"
                     Variant="Variant.Outlined"
                     Min="1" />
    <ValidationMessage For="@(() => playerModel.PlayerNames[2])" />
  </div>
    </MudItem>
    <MudItem>
  <div class="mb-3">
    <MudTextField @bind-Value="playerModel.PlayerNames[3]"
                  Label="Nom du joueur 4"
                  Variant="Variant.Outlined" />
    <MudNumericField @bind-Value="playerModel.HealthPointsMax[3]"
                     Label="HP Max (Joueur 4)"
                     Variant="Variant.Outlined"
                     Min="1" />
    <ValidationMessage For="@(() => playerModel.PlayerNames[3])" />
  </div>
    </MudItem>
  </MudGrid>
  <button type="submit" class="btn btn-primary">Créer</button>
</EditForm>


@code {
  private CampaignModelValidator CampaignModel = new CampaignModelValidator();
  private PlayerModelValidator playerModel = new PlayerModelValidator();

  private async void HandleFormSubmit()
  {
    // Créer une liste de joueurs en excluant les champs vides
    var players = new List<PlayerViewModel>();

    for (int i = 0; i < playerModel.PlayerNames.Count; i++)
    {
      if (!string.IsNullOrWhiteSpace(playerModel.PlayerNames[i]))
      {
        players.Add(new PlayerViewModel
          {
            Name = playerModel.PlayerNames[i],
            HealthPointsMax = playerModel.HealthPointsMax[i], // Ajout des HP Max
            Deck = new DeckViewModel { Name = $"Deck de {playerModel.PlayerNames[i]}" }
          });
      }
    }

    // Si aucun joueur n'est renseigné, afficher un message d'erreur
    if (players.Count == 0)
    {
      Snackbar.Add("Veuillez renseigner au moins un joueur.", Severity.Warning);
      return;
    }

    // Créer l'équipe avec les joueurs valides
    var newCampaign = new CampaignViewModel
      {
        CompanyName = CampaignModel.CompanyName,
        Players = players
      };

    await AppState.AddCampaign(newCampaign);

    Snackbar.Add($"Équipe ajoutée : {newCampaign.CompanyName} avec {newCampaign.Players.Count} joueurs", Severity.Success);
    Navigation.NavigateTo("/campaingslist");
  }

  public class CampaignModelValidator
  {
    [Required(ErrorMessage = "Le nom de la compagnie est requis")]
    public string CompanyName { get; set; }

    [Range(1, 4, ErrorMessage = "Le nombre de joueurs doit être entre 1 et 4")]
    public int PlayerCount { get; set; } = 1;
  }

  public class PlayerModelValidator
  {
    public List<string> PlayerNames { get; set; } = new List<string> { "", "", "", "" }; // 4 champs pour 4 joueurs
    public List<int> HealthPointsMax { get; set; } = new List<int> { 0, 0, 0, 0 }; // Ajout des HP Max pour chaque joueur
  }
}
