@page "/deck"
@using GloomhavenCompanion.Application.ViewModels
@inject AppState AppState
@inject ISnackbar Snackbar

<MudGrid Class="text-align: center">
	<MudPaper Class="p-2 m-2" Style="text-align: center; background-color: #2D3748; max-width: 300px; margin: 0 auto;" @onmouseover="() => showPopup = true" @onmouseout="() => showPopup = false">
		<h2 style="color:white">@SelectedDeck.Name</h2>
		@if (SelectedDeck?.CardsList != null && SelectedDeck.CardsList.Any())
		{
			<CardMolecule Card="@(showingBackCard ? new CardViewModel { ImagePath = BackCardImagePath, Value = "" } : currentCard)" />
			<MudButton Color="Color.Primary" @onclick="ShowNextCardAsync" Style="border: 2px solid groove; background-color: gray; color: white; font-size: 16px; padding: 10px 10px 10px 20px; margin-top: 2px; border-radius: 8px; transition: background-color 0.3s ease;">
				Suivant
			</MudButton>
			@if (DeckName != "MonsterDeck")
			{
				<MudButton Color="Color.Secondary" @onclick="AddBenedictionCard">
					<img src="img/DeckModifier/Monsters/BenedictionCard.png" alt="Ajout bénédiction" style="width: 50px; height: 30px;" />
				</MudButton>
			}
			<MudButton Color="Color.Secondary" @onclick="AddAnnulCard">
				<img src="img/DeckModifier/Monsters/gh-am-mm-01.png" alt="Ajout annuler" style="width: 60px; height: 40px;" />
			</MudButton>
		}
		else
		{
			<p>Aucune carte disponible dans le deck.</p>
		}

		@if (SelectedDeck.CardsHistoric.Count != 0)
		{
			<MudPopover Open="@showPopup">
				<MudPaper Class="p-1">
					<MudGrid>
						@foreach (var card in SelectedDeck.CardsHistoric.TakeLast(5))
						{
							<MudItem xs="15">
								<img src="@card.ImagePath" alt="Card image" style="width: 50px; height: 30px;" />
							</MudItem>
						}
					</MudGrid>
				</MudPaper>
			</MudPopover>
		}
	</MudPaper>
</MudGrid>



@code {
	[Parameter]
	public string DeckName { get; set; }
	private bool showPopup = false;
	protected DeckViewModel SelectedDeck { get; set; }
	protected PlayerViewModel CurrentPlayer { get; set; }

	private bool showingBackCard = true;
	private const string BackCardImagePath = "img/DeckModifier/Monsters/gh-am-m-back.png";
	private CardViewModel currentCard;

	protected override void OnInitialized()
	{
		AppState.OnRoundChanged += HideCardBack; // Abonnement à l’événement
		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		CurrentPlayer = new PlayerViewModel()
			{
				Name = "Monster",
				Deck = AppState.CurrentGame.MonsterDeck
			};

		// Récupérer le deck sélectionné
		SelectedDeck = CurrentPlayer.Deck;

		// Si le deck existe et que la carte est visible, on affiche la première carte
		if (SelectedDeck != null && SelectedDeck.IsShowingBackCard)
		{
			currentCard = SelectedDeck.CardsList.FirstOrDefault(); // On affiche la première carte
		}
		else
		{
			currentCard = new CardViewModel { ImagePath = BackCardImagePath }; // Afficher la carte de dos par défaut
		}
	}

	private void HideCardBack()
	{
		showingBackCard = true;
		currentCard = new CardViewModel { ImagePath = BackCardImagePath };
		InvokeAsync(StateHasChanged); // Utiliser InvokeAsync pour assurer le bon rafraîchissement
	}

	public void Dispose()
	{
		AppState.OnRoundChanged -= HideCardBack; // Se désabonner pour éviter les fuites de mémoire
	}

	private async Task ShowBackCardThenShuffleAsync()
	{
		currentCard = new CardViewModel { ImagePath = BackCardImagePath };
		CurrentPlayer.Deck.ShuffleDeck();
		showingBackCard = !showingBackCard;
		StateHasChanged();
	}

	private async Task ShowBackCardAsync()
	{
		currentCard = new CardViewModel { ImagePath = BackCardImagePath };
		showingBackCard = !showingBackCard;
		StateHasChanged();
	}

	private async Task ShowNextCardAsync()
	{
		if (showingBackCard)
		{
			currentCard = SelectedDeck.CardsList.FirstOrDefault();
		}
		else
		{
			showingBackCard = true;
			currentCard = new CardViewModel { ImagePath = BackCardImagePath };
			StateHasChanged();
			await Task.Delay(1000);
			currentCard = SelectedDeck.CardsList.FirstOrDefault();
		}
		CurrentPlayer.Deck.ShowAndMoveFirstCardToEnd();
		showingBackCard = false;
		if (currentCard.NeedShuffle == true)
		{
			CurrentPlayer.Deck.ShuffleDeck();
		}
		StateHasChanged();
	}

	private async Task AddAnnulCard()
	{
		AppState.CurrentGame.MonsterDeck.AddAnnulCard();
		Snackbar.Add("Carte annulée ajoutée au deck" + AppState.CurrentGame.MonsterDeck.Name + "!", Severity.Success);
		StateHasChanged();
	}

	private async Task AddBenedictionCard()
	{
		CurrentPlayer.Deck.AddX2Card();
		Snackbar.Add("Carte bénédiction ajoutée au deck" + AppState.CurrentGame.MonsterDeck.Name + "!", Severity.Success);
		StateHasChanged();
	}
}
